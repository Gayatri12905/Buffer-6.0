Hereâ€™s a detailed *description* of your *Finance Quest Game (Java Swing)* code with hotpink and purple theme, level system, sound effects, and leaderboard:

---

### ðŸŽ® *Finance Quest Game Description*

*Finance Quest Game* is a beginner-friendly *Java-based quiz game* built using *Swing* for GUI. The game educates users about *financial literacy* by asking multiple-choice questions and advancing through *three levels* of increasing difficulty.

 ðŸ’¡ *Key Features*

#### 1. *User Input and Game Start*
- The game starts with a *pop-up dialog* asking for the player's name.
- If the name is empty, the default name is set as "Player".
- Plays a *"start.wav"* sound to indicate the beginning of the game.

#### 2. *Game Levels and Questions*
- The game has *three levels*:
  - *Level 1* â€“ Basic financial questions.
  - *Level 2* â€“ Intermediate concepts (like credit score, compound interest).
  - *Level 3* â€“ Advanced topics (ETFs, liabilities, diversification).
- Each level has *3 questions*.
- To move to the next level, the player must score *at least (level Ã— 3)* points (i.e., 3 points after level 1, 6 after level 2).

#### 3. *Gameplay and GUI*
- Each question is shown in a JLabel at the center.
- Three answer options are displayed using `JButton`s.
- Upon clicking an option:
  - If correct, 1 point is added and *"success.wav"* is played.
  - If incorrect, *"failure.wav"* is played.
- The top panel shows:
  - *Score* label in *purple*.
  - *Level* label in *purple*.
- Buttons and panels are colored *hotpink*, giving it a vibrant look.

#### 4. *Game Over Conditions*
- If the player does not score enough to advance, the game ends with a "Sorry" message.
- If the player completes all levels, the game ends successfully.

#### 5. *Leaderboard System*
- On game over, the player's score is saved in leaderboard.txt.
- The leaderboard is displayed showing all past playersâ€™ scores.

#### 6. *Sound Effects*
- Custom sound files play at important events:
  - "start.wav" â€“ when game begins.
  - "success.wav" â€“ when the player answers correctly.
  - "failure.wav" â€“ when the answer is wrong.
  - "end.wav" â€“ at the end of the game.

Video Link : https://drive.google.com/file/d/1iKtmx7j-P-gMlPiNl2UGpRnnK7ec3aru/view?usp=drivesdk

Data Structres Used : 
| Data Structure      | Purpose                                | Why It's Used                          |
|---------------------|----------------------------------------|----------------------------------------|
| List<String[]>      | Store questions and options            | Ordered access, easy to index          |
| List<String>        | Store random events                    | Simple iteration and random access     |
| String              | Store text data (player name, answers) | Lightweight and flexible               |
| int                 | Track score, level, and question index | Efficient for counting and tracking    |
| JButton[] / JLabel  | GUI components                         | Fixed-size UI elements                 |
| File I/O            | Save/load leaderboard                  | Persistent data storage                |
